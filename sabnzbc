#!/usr/bin/python
import json
import re
import os
import urllib
import curses
import sys
import time
import threading
import datetime
import platform
from curses.textpad import Textbox

itemCmds = {
	'd': ['queue&name=delete', None],
	'm': ['switch', 'id'],
	's': ['change_script', 'str'],
	'c': ['change_cat', 'str'],
	'o': ['change_opts', 'str'],
	'y': ['priority', 'str'],
	'p': ['pause', 'id'],
	'r': ['resume', 'id'],
	#'n': ['rename', 'str'] # Not yet implemented on SABnzbd end
	}

queueCmds = {'P': 'pause', 'R': 'resume', 'S': 'shutdown'}

help = '''
=============================================================================
| Item Commands      | Queue Commands      | Column Names                   |
| ------------------ | ------------------- | ------------------------------ |
| d: delete          | P: pause            | t: Status       p: Priority    |
| m: move            | R: resume           | i: Index        c: Category    |
| s: change script   | S: shutdown         | e: ETA          r: MB Left     |
| c: change category |                     | l: Time Left    %: Percentage  |
| o: change options  | Other Commands      | a: Age          b: SAB ID      |
| y: change priority | ------------------- | s: Script       o: Options     |
| p: pause           | q: quit             | g: Message ID   z: Size        |
| r: resume          | h: toggle help      | v: Verbosity    n: Name        |
|                    | t: toggle column    | m: Size (MB)    *: All         |
| ------------------------------------------------------------------------- |
|                    Syntax: command start-stop argument                    |
=============================================================================
'''

class Column(object):
	def __init__(self, sabName, displayName=None, shortName=None, width=10, visible=False):
		self.sabName = sabName
		self.displayName = displayName if displayName else sabName.capitalize()
		self.shortName = shortName if shortName else self.displayName[0].lower()
		self.width = width
		self.visible = visible

def initColumns():
	columns = [
		Column('status', shortName='t', width=11),
		Column('index', '#', 'i', 3, True),
		Column('eta', 'ETA'),
		Column('timeleft', 'Time Left', 'l', 9),
		Column('avg_age', 'Age', width=4),
		Column('script'),
		Column('msgid', 'Message ID', shortName='g'),
		Column('verbosity'),
		Column('mb', 'Size (MB)', 'm'),
		Column('filename', 'Name', width=40, visible=True),
		Column('priority'),
		Column('cat', 'Category', visible=True),
		Column('mbleft', 'MB Left', 'r'),
		Column('percentage', '%', '%'),
		Column('nzo_id', 'SAB ID', 'b', 18),
		Column('unpackopts', 'Options'),
		Column('size', shortName='z')
	]
	# Sanity check
	shortNames = set()
	for column in columns:
		shortName = column.shortName
		if shortName not in shortNames: shortNames.add(shortName)
		else: raise KeyError, 'short name for %s already in use' % column.displayName
	return columns

def log(*args):
	f = open(os.path.expanduser('~/Library/Logs/sabnzbc.log'), 'a')
	f.write(datetime.datetime.now().strftime('%c: '))
	for arg in args: f.write('%s ' % str(arg))
	f.write('\n')
	f.close()

def _getURL(url):
	f = urllib.urlopen(url)
	r = f.read()
	f.close()
	return r

def _getJSON(url):
	return json.loads(_getURL(url))

def _readFile(path):
	f = open(path)
	r = f.read()
	f.close()
	return r

def strWithWidth(s, w):
	return '{0:{1}}'.format(s[:w], w)

def _getConfig():
	system = platform.system()
	if system == 'Darwin': configPath = '~/Library/Application Support/SABnzbd/sabnzbd.ini'
	elif system == 'Unix' or system == 'Linux': configPath ='~/.sabnzbd/sabnzbd.ini'
	elif system == 'Windows':
		winVersion = os.sys.getwindowsversion()
		oldVersions = {(1, 4, 0): "95", (1, 4, 10): "98", (1, 4, 90): "ME", (2, 4, 0): "NT", (2, 5, 0): "2K", (2, 5, 1): "XP", (2, 5, 2): '2003',}
		if winVersion in oldVersions: configPath = '~\\local data\\application data\\sabnzbd\\sabnzbd.ini'
		else: configPath = '~\\AppData\\Local\\sabnzbd\\sabnzbd.ini'
	
	configPath = os.path.expanduser(configPath)
	if not os.path.exists(configPath):
		return (None, None)

	r = _readFile(configPath)
	apiKey = None
	port = None
	for line in r.split('\n'):
		if line.startswith('api_key'):
			apiKey = line.split('=')[1].strip()
		elif line.startswith('port') and not port:
			port = line.split('=')[1].strip()
	return (apiKey, port)

class Dimensions(object):
	def __init__(self, y, x, height, width):
		self.y, self.x, self.height, self.width = (y, x, height, width)
	
	def __str__(self):
		return '%i %i %i %i' % (self.y, self.x, self.height, self.width)
	
	def __eq__(a, b):
		if a.y == b.y and a.x == b.x and a.height == b.height and a.width == b.width: return True
		else: return False
	
	def __ne__(a, b):
		return not a == b

	def size(self):
		return self.width * self.height
	
	def __lt__(a, b):
		return a.size < b.size
	
	def __gt__(a, b):
		return a.size > b.size
	
	def __le__(a, b):
		return a.size <= b.size
	
	def __ge__(a, b):
		return a.size >= b.size
	
def getDimensions(win):
	height, width = win.getmaxyx()
	y, x = win.getbegyx()
	return Dimensions(y, x, height, width)
	
class Sabnzbc(object):
	def newQueueWin(self):
		self.queueWin = curses.newwin(self.screenDimensions.height - 1, self.screenDimensions.width, self.screenDimensions.y, self.screenDimensions.x)
		self.queueDimensions = getDimensions(self.queueWin)
		self.queueWin.clear()
		self.queueWin.refresh()
		#log('moved queue to ', self.queueDimensions)
	
	def newPrompt(self):
		self.prompt = curses.newwin(1, 4, self.screenDimensions.height - 1, 0)
		self.prompt.addstr(0, 0, '>>>')
		self.prompt.refresh()
	
	def newPromptWin(self):
		self.promptWin = curses.newwin(1, self.screenDimensions.width - 4, self.screenDimensions.height - 1, 4)
		self.promptWin.clear()
		self.promptWin.refresh()
		self.promptBox = Textbox(self.promptWin)
	
	def __init__(self, base, apiKey):
		if not base and not apiKey:
			self.apiKey, port = _getConfig()
			self.base = 'localhost:%s' % port
		self.screen = curses.initscr()
		curses.start_color()
		self.screenDimensions = getDimensions(self.screen)
		self.newQueueWin()
		self.newPrompt()
		self.newPromptWin()	
		curses.init_pair(1, curses.COLOR_WHITE, curses.COLOR_RED)
		self.die = False
		self.endWins = False
	
	def sendCmd(self, cmd, arg1=None, arg2=None):
		s = 'http://%s/api?mode=%s&output=json&apikey=%s' % (self.base, cmd, self.apiKey)
		if arg1: s += '&value='  + urllib.quote(arg1)
		if arg2: s += '&value2=' + urllib.quote(arg2)
		#log('sending command', s)
		return _getJSON(s)
	
	def printColumnHeaders(self, columns, y, x):
		#log('printing column headers:', y, x)
		for column in columns:
			try: self.queueWin.addnstr(y, x, column.displayName, column.width)
			except: pass
			x += column.width + 1
	
	def printQueue(self, queue):
		bgcolor = curses.color_pair(1)
		self.queueWin.clear()
		visibleColumns = [column for column in self.columns if column.visible]
		colWidth = sum([column.width + 1 for column in visibleColumns])
		self.queueWin.addstr('status: %s, remaining: %s MB, ETA: %s, speed: %s KB/s available: %s GB' % (queue['status'], queue['mbleft'], queue['eta'], queue['kbpersec'], queue['diskspace1']))
		
		y = self.queueDimensions.y + 1
		offset = 0
		x = self.queueDimensions.x
		self.printColumnHeaders(visibleColumns, y, offset)
		y += 1
		for index, item in enumerate(queue['slots']):
			if self.endWins: return
			if y == self.queueDimensions.height:
				y = 2
				x += colWidth
				try: self.queueWin.vline(1, x - 1, '|', self.queueDimensions.height - 1)
				except curses.error: pass
				self.printColumnHeaders(visibleColumns, 1, x)
			if x == self.queueDimensions.width: break
			if int(item['index']) % 2 == 0:
				self.queueWin.attron(bgcolor)
			#try:
			offset = 0
			for column in visibleColumns:
				try: self.queueWin.addnstr(y, x + offset, strWithWidth(str(item[column.sabName]), min(column.width, self.queueDimensions.width - x - offset)), column.width)
				except:
					#log('Failed to write:', column.displayName, column.width, self.queueDimensions.width, x, offset)
					if self.screenDimensions != getDimensions(self.screen):
						return
				offset += column.width + 1
			#except curses.error: pass
			y += 1
			self.queueWin.attroff(bgcolor)
	
	def printHelp(self):
		row = self.queueDimensions.y + self.queueDimensions.height - help.count('\n')
		for line in help.split('\n'):
			try: self.queueWin.addnstr(row, self.queueDimensions.x, line, len(line))
			except curses.error: pass
			row += 1
	
	def handleCmd(self, cmdStr):
		cmdName = cmdStr[0]
	
		if cmdName == 'q':
			self.die = True
			return
		
		if cmdName == 'h':
			self.helpOn = not self.helpOn
		
		cmdStr = cmdStr[1:].strip()
		
		if cmdName == 't':
			if cmdStr[0] == '*':
				if any([not column.visible for column in self.columns]):
					for column in self.columns: column.visible = True
				else:
					for column in self.columns: column.visible = False
			else:
				try:
					column = [column for column in self.columns if column.shortName == cmdStr[0]][0]
				except IndexError: pass
				else:
					column.visible = not column.visible
		
		start = end = None
		startMatch = re.match(r'(\d+)', cmdStr)
		if startMatch:
			start = int(startMatch.groups()[0])
			cmdStr = cmdStr[startMatch.end():].strip()
			endMatch = re.match(r'-(\d+)', cmdStr)
			if endMatch:
				end = int(endMatch.groups()[0])
				cmdStr = cmdStr[endMatch.end():].strip()
		arg = cmdStr
		
		if cmdName in itemCmds and (start != None) and not ((itemCmds[cmdName][1] == None) ^ (arg == '')):
			itemRange = range(start, end + 1)  if (end and end > start) else range(start, start + 1)
			if itemCmds[cmdName][1] == 'id': arg = self.ids[int(arg)]
			value2 = arg if (arg != '') else None		
			for i in itemRange:
				self.sendCmd(itemCmds[cmdName][0], self.ids[i], value2)
		elif cmdName in queueCmds:
			self.sendCmd(queueCmds[cmdName])
		self.forceUpdate = True
	
	def runQueueWin(self):
		#log('running queue win')
		self.columns = initColumns()
		self.forceUpdate = False
		self.helpOn = False
		refreshInterval = datetime.timedelta(0, 3)
		while not self.die and not self.endWins:
			queue = self.sendCmd('queue')['queue']
			self.ids = list()
			# Note: 15027d is an invalid age
			maxNameLen = 0
			for item in queue['slots']:
				self.ids.append(item['nzo_id'])
				maxNameLen = max(len(item['filename']), maxNameLen)
			[column for column in self.columns if column.sabName == 'filename'][0].width = maxNameLen
			cursY, cursX = curses.getsyx()
			self.printQueue(queue)
			if self.helpOn: self.printHelp()
			self.queueWin.refresh()
			curses.setsyx(cursY, cursX)
			curses.doupdate()
			lastPrint = datetime.datetime.now()
			while datetime.datetime.now() - lastPrint < refreshInterval and not self.forceUpdate and not self.die and not self.endWins: pass
			self.forceUpdate = False
	
	def screenDimensionsDidChange(self):
		self.screenDimensions = getDimensions(self.screen)
		self.endWins = True
		self.qt.join()
		self.pr.join()
		self.endWins = False
		
		self.newQueueWin()
		self.newPrompt()
		self.newPromptWin()
		curses.doupdate()
		self.runThreads(True)
		
	def monitorScreenSize(self):
		while not self.die:
			newDimensions = getDimensions(self.screen)
			if self.screenDimensions != newDimensions:
				#log('screen changed from', self.screenDimensions, 'to', newDimensions)
				self.screenDimensionsDidChange()
			time.sleep(0.1)
	
	def validator(self, c):
		if c == 127: c = curses.ascii.BS
		return c
	
	def edit(self, txtBox, validate=None):
		#Based on the curses module
		while not self.endWins:
			ch = txtBox.win.getch()
			if ch == -1: continue
			if validate:
				ch = validate(ch)
				if not ch: continue
				if not txtBox.do_command(ch): break
			txtBox.win.refresh()
		x = txtBox.gather()
		if not self.endWins: return x
	
	def runPromptWin(self):
		#log('running prompt win')
		curses.noecho()
		curses.cbreak()
		self.promptWin.nodelay(1)
		self.promptWin.keypad(1)
		while not self.die and not self.endWins:
			self.promptWin.clear()
			self.promptWin.refresh()
			cmdStr = self.edit(self.promptBox, self.validator)
			try: self.handleCmd(cmdStr)
			except: pass
	
	def runThreads(self, noRT=False):
		self.qt = threading.Thread(None, self.runQueueWin, None, list())
		self.qt.start()
		
		if not noRT:
			self.rt = threading.Thread(None, self.monitorScreenSize, None, list())
			self.rt.start()
		
		self.pr = threading.Thread(None, self.runPromptWin, None, list())
		self.pr.start()

	
def main(base, apiKey):
	s = Sabnzbc(base, apiKey)
	s.runThreads()
	
	while not s.die:
		pass
	
if __name__ == '__main__':
	if len(sys.argv) == 3:
		name, base, apiKey = sys.argv
	elif len(sys.argv) > 1:
		print 'Usage: %s SABnzbd-URL API-Key' % sys.argv[0]
		sys.exit(1)
	else:
		base = apiKey = None
		try: main(base, apiKey)
		finally: curses.endwin()
	
